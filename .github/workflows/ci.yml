---
# SOURCE: https://github.com/openai/openai-python/blob/aed1e43745cd6358b4bafd3a39b3dfeee5e31a03/.github/workflows/ci.yml
name: CI

# SOURCE: https://github.com/tornadoweb/tornado/blob/f399f40fde0ae1b130646db783a6f79cc59231b2/.github/workflows/build.yml#L37
on:  # yamllint disable-line rule:truthy
  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#push
  push:
    branches:
      # Run on release branches. This gives us a chance to detect rot in this
      # configuration before pushing a tag (which we'd rather not have to undo).
      - main
      - feature/**
      - '[0-9].*.x'  # e.g., 4.14.x
      - '[0-9][0-9].*.x'  # e.g., 23.3.x
    tags:
      # The main purpose of this workflow is to build wheels for release tags.
      # It runs automatically on tags matching this pattern and pushes to pypi.
      - v*
  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
  pull_request:

  #  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow_dispatch
  # workflow_dispatch:
  #  # Allow this workflow to be run manually (pushing to testpypi instead of pypi)
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)
        required: false
        default: false
env:
  python-version: '3.12'
  MAIN_PYTHON_VERSION: '3.12'
  # Update with your API URL if using a hosted instance of Langsmith.
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  LANGCHAIN_TRACING_V2: true
  LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
  LANGCHAIN_HUB_API_URL: "https://api.hub.langchain.com"
  LANGCHAIN_ENDPOINT: https://api.smith.langchain.com
  LANGCHAIN_HUB_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
  LANGCHAIN_PROJECT: "sandbox_agent"
  SANDBOX_AGENT_CONFIG_DISCORD_TOKEN: "foo"
  SANDBOX_AGENT_CONFIG_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
  BRAVE_SEARCH_API_KEY: ${{ secrets.BRAVE_SEARCH_API_KEY }}
jobs:
  test:
    name: test
    runs-on: ubuntu-24.04

    if: github.repository == 'bossjones/sandbox_agent'
    env:
      OS: ubuntu-24.04
      PYTHON: '3.12'
      # LANGCHAIN_ENDPOINT: https://api.smith.langchain.com
      # LANGCHAIN_TRACING_V2: true
      # OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      # LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
      # # Update with your API URL if using a hosted instance of Langsmith.
      # LANGCHAIN_HUB_API_URL: https://api.hub.langchain.com
      # LANGCHAIN_HUB_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
      # LANGCHAIN_PROJECT: sandbox_agent
      # sandbox_agent_CONFIG_DISCORD_TOKEN: foo
      # sandbox_agent_CONFIG_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      # Update with your API URL if using a hosted instance of Langsmith.
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      LANGCHAIN_TRACING_V2: true
      LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
      LANGCHAIN_HUB_API_URL: "https://api.hub.langchain.com"
      LANGCHAIN_ENDPOINT: https://api.smith.langchain.com
      LANGCHAIN_HUB_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
      LANGCHAIN_PROJECT: "sandbox_agent"
      SANDBOX_AGENT_CONFIG_DISCORD_TOKEN: "foo"
      SANDBOX_AGENT_CONFIG_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
      BRAVE_SEARCH_API_KEY: ${{ secrets.BRAVE_SEARCH_API_KEY }}
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref_name }} and your repository is ${{ github.repository }}."
      - name: Set up Git repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Start Redis
        id: redis-docker-compose-up
        run: |
          curl -SL https://github.com/docker/compose/releases/download/v2.29.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          docker compose up -d
          docker ps -a
        continue-on-error: true
      - name: Start Chroma
        id: chroma-docker-compose-up
        run: |
          mkdir -p ./src/sandbox_agent/data/chroma/vectorstorage || true
          # git clone --depth 1 --branch feature-boss-chroma https://github.com/bossjones/chroma.git vendored_chroma
          # cd vendored_chroma
          docker compose up -d
          docker ps -a

      - name: Start Pgvector
        id: pgvector-docker-compose-up
        run: |
          docker compose down -v || true
          docker network rm net || true
          docker volume rm sbx_pgdata || true
          docker volume rm sbx_pgadmindata || true
          docker volume rm sbx_goob_redis_data || true
          sleep 30
          docker compose up -d
          ./scripts/wait-until "docker compose exec -T -e PGPASSWORD=langchain pgdatabase psql -U langchain langchain -c 'select 1'" 300
          rye run db_upgrade
        continue-on-error: true

      - name: Checkout
        uses: actions/checkout@v4
      - name: get version python
        shell: bash  # use bash to run date command
        run: echo "Py${{ env.python-version }}"
      - name: Hash + Timestamp
        shell: bash  # use bash to run date command
        run: echo "HASH=${{ runner.os }}-${{ runner.arch }}-Py${{ env.python-version }}-$(date -u "+%Y%m")" >> $GITHUB_ENV

      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}

      - name: Install Rye
        run: |
          curl -sSf https://rye.astral.sh/get | bash
          echo "$HOME/.rye/shims" >> $GITHUB_PATH
        env:
          RYE_VERSION: 0.41.0
          RYE_INSTALL_OPTION: --yes
      - name: install tesseract and ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get -y install --no-install-recommends  python3-dev python3 ca-certificates python3-numpy python3-setuptools python3-wheel python3-pip g++ gcc ninja-build cmake
          sudo apt-get install -y --no-install-recommends aria2 aria2
          sudo apt-get update --fix-missing && sudo apt-get install -y --fix-missing build-essential gcc g++ cmake autoconf
          sudo apt-get install -y libmagic-dev poppler-utils libreoffice libomp-dev
          sudo apt-get install -y tesseract-ocr tesseract-ocr-por libyaml-dev poppler-utils
          sudo apt install ffmpeg -y
          sudo apt-get install autoconf automake build-essential libtool python3-dev libsqlite3-dev -y
          echo "install deps for llm_aided_ocr"
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev \
          libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
          xz-utils tk-dev libffi-dev liblzma-dev python3-openssl git
          sudo apt-get install libpq5 -y
      - name: Install dependencies
        # if: steps.cached-rye-dependencies.outputs.cache-hit != 'true'
        env:
          # LANGCHAIN_ENDPOINT: https://api.smith.langchain.com
          # LANGCHAIN_TRACING_V2: true
          # OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          # # Update with your API URL if using a hosted instance of Langsmith.
          # LANGCHAIN_HUB_API_URL: https://api.hub.langchain.com
          # LANGCHAIN_HUB_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          # LANGCHAIN_PROJECT: sandbox_agent
          # sandbox_agent_CONFIG_DISCORD_TOKEN: foo
          # sandbox_agent_CONFIG_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Update with your API URL if using a hosted instance of Langsmith.
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGCHAIN_TRACING_V2: true
          LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          LANGCHAIN_HUB_API_URL: "https://api.hub.langchain.com"
          LANGCHAIN_ENDPOINT: https://api.smith.langchain.com
          LANGCHAIN_HUB_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          LANGCHAIN_PROJECT: "sandbox_agent"
          SANDBOX_AGENT_CONFIG_DISCORD_TOKEN: "foo"
          SANDBOX_AGENT_CONFIG_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
          BRAVE_SEARCH_API_KEY: ${{ secrets.BRAVE_SEARCH_API_KEY }}
        run: |
          cp -f env.sample .env
          rye config --set-bool behavior.use-uv=true
          ./scripts/retry -t 4  -- rye sync --all-features

      # Allow debugging with tmate
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
        with:
          # Use registered public SSH key(s)
          # If you have registered one or more public SSH keys with your GitHub profile, tmate will be started such that only those keys are authorized to connect, otherwise anybody can connect to the tmate session. If you want to require a public SSH key to be installed with the tmate session, no matter whether the user who started the workflow has registered any in their GitHub profile, you will need to configure the setting limit-access-to-actor to true, like so:
          limit-access-to-actor: true
      - name: Run tests and collect coverage
        env:
          # LANGCHAIN_ENDPOINT: https://api.smith.langchain.com
          # LANGCHAIN_TRACING_V2: true
          # OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          # # Update with your API URL if using a hosted instance of Langsmith.
          # LANGCHAIN_HUB_API_URL: https://api.hub.langchain.com
          # LANGCHAIN_HUB_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          # LANGCHAIN_PROJECT: sandbox_agent
          # sandbox_agent_CONFIG_DISCORD_TOKEN: foo
          # sandbox_agent_CONFIG_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Update with your API URL if using a hosted instance of Langsmith.
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGCHAIN_TRACING_V2: true
          LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          LANGCHAIN_HUB_API_URL: "https://api.hub.langchain.com"
          LANGCHAIN_ENDPOINT: https://api.smith.langchain.com
          LANGCHAIN_HUB_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          LANGCHAIN_PROJECT: "sandbox_agent"
          SANDBOX_AGENT_CONFIG_DISCORD_TOKEN: "foo"
          SANDBOX_AGENT_CONFIG_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
          BRAVE_SEARCH_API_KEY: ${{ secrets.BRAVE_SEARCH_API_KEY }}
        run: |
          # cp -f env.sample .env
          # rye config --set-bool behavior.use-uv=true
          # ./scripts/retry -t 4  -- rye sync --all-features
          # rye run goobctl chroma generate
          echo "rye run lint"
          rye run lint

          # rye run typecheck
          echo "rye run python -c 'import sandbox_agent'"
          rye run python -c 'import sandbox_agent'
          echo "rye run test"
          rye run test
          sudo apt update
          sudo apt-get install tree -y
          tree
          ls -lta

      - name: tmate session if tests fail
        if: failure() && github.event_name == 'workflow_dispatch'
        uses: mxschmitt/action-tmate@v3
        with:
          # Use registered public SSH key(s)
          # If you have registered one or more public SSH keys with your GitHub profile, tmate will be started such that only those keys are authorized to connect, otherwise anybody can connect to the tmate session. If you want to require a public SSH key to be installed with the tmate session, no matter whether the user who started the workflow has registered any in their GitHub profile, you will need to configure the setting limit-access-to-actor to true, like so:
          limit-access-to-actor: true
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          # token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ runner.os }},${{ runner.arch }},${{ env.python-version }}
          verbose: true
          fail_ci_if_error: true
          # directory: ./junit/
          # files: ./test-results.xml,cov.xml
          files: ./cov.xml
          # flags: smart-tests
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload Test Results
        if: '!cancelled()'
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808
        with:
          name: test-results-${{ env.HASH }}
          path: |
            .coverage
            tools\durations\${{ runner.os }}.json
            junit/test-results.xml
            cov.xml
          retention-days: 1  # temporary, combined in aggregate below
