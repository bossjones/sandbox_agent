"""Tests for the EmbeddingModelFactory class."""

from __future__ import annotations

from typing import TYPE_CHECKING

from langchain.embeddings import OpenAIEmbeddings

import pytest

from sandbox_agent.ai.embedding_models import EmbeddingModelFactory
from sandbox_agent.aio_settings import aiosettings


if TYPE_CHECKING:
    from pytest_mock import MockerFixture


class TestEmbeddingModelFactory:
    """Tests for the EmbeddingModelFactory class."""

    def test_create_supported_model(self) -> None:
        """Test that the factory creates the correct embedding model for a supported model name."""
        model_name = "text-embedding-3-large"
        embedding_model = EmbeddingModelFactory.create(model_name)
        assert isinstance(embedding_model, OpenAIEmbeddings)
        assert embedding_model.model == model_name

    def test_create_unsupported_model(self) -> None:
        """Test that the factory raises an error for an unsupported model name."""
        unsupported_model_name = "unsupported-model"
        with pytest.raises(ValueError) as excinfo:
            EmbeddingModelFactory.create(unsupported_model_name)
        assert str(excinfo.value) == f"Unsupported model: {unsupported_model_name}"

    @pytest.mark.skip(reason="generated by cursor but not yet ready")
    @pytest.mark.flaky
    def test_create_default_model(self, mocker: MockerFixture) -> None:
        """Test that the factory creates the default embedding model when no model name is provided."""
        default_model_name = "default-model"
        mocker.patch.object(aiosettings, "llm_embedding_model_name", default_model_name)
        mocker.patch.object(
            EmbeddingModelFactory,
            "create",
            side_effect=lambda x: OpenAIEmbeddings(model=x) if x == default_model_name else None,
        )
        embedding_model = EmbeddingModelFactory.create()
        assert isinstance(embedding_model, OpenAIEmbeddings)
        assert embedding_model.model == default_model_name
