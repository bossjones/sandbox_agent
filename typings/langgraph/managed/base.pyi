"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from contextlib import asynccontextmanager, contextmanager
from typing import Any, AsyncIterator, Generic, Iterator, NamedTuple, Sequence, Type, TypeVar, Union
from typing_extensions import Self, TypeGuard
from langgraph.types import LoopProtocol

V = TypeVar("V")
U = TypeVar("U")
class ManagedValue(ABC, Generic[V]):
    def __init__(self, loop: LoopProtocol) -> None:
        ...

    @classmethod
    @contextmanager
    def enter(cls, loop: LoopProtocol, **kwargs: Any) -> Iterator[Self]:
        ...

    @classmethod
    @asynccontextmanager
    async def aenter(cls, loop: LoopProtocol, **kwargs: Any) -> AsyncIterator[Self]:
        ...

    @abstractmethod
    def __call__(self) -> V:
        ...



class WritableManagedValue(Generic[V, U], ManagedValue[V], ABC):
    @abstractmethod
    def update(self, writes: Sequence[U]) -> None:
        ...

    @abstractmethod
    async def aupdate(self, writes: Sequence[U]) -> None:
        ...



class ConfiguredManagedValue(NamedTuple):
    cls: Type[ManagedValue]
    kwargs: dict[str, Any]
    ...


ManagedValueSpec = Union[Type[ManagedValue], ConfiguredManagedValue]
def is_managed_value(value: Any) -> TypeGuard[ManagedValueSpec]:
    ...

def is_readonly_managed_value(value: Any) -> TypeGuard[Type[ManagedValue]]:
    ...

def is_writable_managed_value(value: Any) -> TypeGuard[Type[WritableManagedValue]]:
    ...

ChannelKeyPlaceholder = ...
ChannelTypePlaceholder = ...
ManagedValueMapping = dict[str, ManagedValue]
