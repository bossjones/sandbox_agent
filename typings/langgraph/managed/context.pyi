"""
This type stub file was generated by pyright.
"""

from contextlib import asynccontextmanager, contextmanager
from typing import Any, AsyncContextManager, AsyncIterator, Callable, ContextManager, Generic, Iterator, Optional, Type, Union
from typing_extensions import Self
from langgraph.managed.base import ConfiguredManagedValue, ManagedValue, V
from langgraph.types import LoopProtocol

class Context(ManagedValue[V], Generic[V]):
    runtime = ...
    value: V
    @staticmethod
    def of(ctx: Union[None, Callable[..., ContextManager[V]], Type[ContextManager[V]], Callable[..., AsyncContextManager[V]], Type[AsyncContextManager[V]],] = ..., actx: Optional[Union[Callable[..., AsyncContextManager[V]], Type[AsyncContextManager[V]],]] = ...) -> ConfiguredManagedValue:
        ...

    @classmethod
    @contextmanager
    def enter(cls, loop: LoopProtocol, **kwargs: Any) -> Iterator[Self]:
        ...

    @classmethod
    @asynccontextmanager
    async def aenter(cls, loop: LoopProtocol, **kwargs: Any) -> AsyncIterator[Self]:
        ...

    def __init__(self, loop: LoopProtocol, *, ctx: Union[None, Type[ContextManager[V]], Type[AsyncContextManager[V]]] = ..., actx: Optional[Type[AsyncContextManager[V]]] = ...) -> None:
        ...

    def __call__(self) -> V:
        ...
