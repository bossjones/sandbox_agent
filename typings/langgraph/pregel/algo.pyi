"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Iterable, Literal, Mapping, NamedTuple, Optional, Protocol, Sequence, Union, overload
from langchain_core.callbacks.manager import AsyncParentRunManager, ParentRunManager
from langchain_core.runnables.config import RunnableConfig
from langgraph.channels.base import BaseChannel
from langgraph.checkpoint.base import BaseCheckpointSaver, Checkpoint, V
from langgraph.managed.base import ManagedValueMapping
from langgraph.pregel.read import PregelNode
from langgraph.store.base import BaseStore
from langgraph.types import All, PregelExecutableTask, PregelTask

GetNextVersion = Callable[[Optional[V], BaseChannel], V]
class WritesProtocol(Protocol):
    """Protocol for objects containing writes to be applied to checkpoint.
    Implemented by PregelTaskWrites and PregelExecutableTask."""
    @property
    def name(self) -> str:
        ...

    @property
    def writes(self) -> Sequence[tuple[str, Any]]:
        ...

    @property
    def triggers(self) -> Sequence[str]:
        ...



class PregelTaskWrites(NamedTuple):
    """Simplest implementation of WritesProtocol, for usage with writes that
    don't originate from a runnable task, eg. graph input, update_state, etc."""
    name: str
    writes: Sequence[tuple[str, Any]]
    triggers: Sequence[str]
    ...


def should_interrupt(checkpoint: Checkpoint, interrupt_nodes: Union[All, Sequence[str]], tasks: Iterable[PregelExecutableTask]) -> list[PregelExecutableTask]:
    """Check if the graph should be interrupted based on current state."""
    ...

def local_read(step: int, checkpoint: Checkpoint, channels: Mapping[str, BaseChannel], managed: ManagedValueMapping, task: WritesProtocol, config: RunnableConfig, select: Union[list[str], str], fresh: bool = ...) -> Union[dict[str, Any], Any]:
    """Function injected under CONFIG_KEY_READ in task config, to read current state.
    Used by conditional edges to read a copy of the state with reflecting the writes
    from that node only."""
    ...

def local_write(commit: Callable[[Sequence[tuple[str, Any]]], None], process_keys: Iterable[str], writes: Sequence[tuple[str, Any]]) -> None:
    """Function injected under CONFIG_KEY_SEND in task config, to write to channels.
    Validates writes and forwards them to `commit` function."""
    ...

def increment(current: Optional[int], channel: BaseChannel) -> int:
    """Default channel versioning function, increments the current int version."""
    ...

def apply_writes(checkpoint: Checkpoint, channels: Mapping[str, BaseChannel], tasks: Iterable[WritesProtocol], get_next_version: Optional[GetNextVersion]) -> dict[str, list[Any]]:
    """Apply writes from a set of tasks (usually the tasks from a Pregel step)
    to the checkpoint and channels, and return managed values writes to be applied
    externally."""
    ...

@overload
def prepare_next_tasks(checkpoint: Checkpoint, processes: Mapping[str, PregelNode], channels: Mapping[str, BaseChannel], managed: ManagedValueMapping, config: RunnableConfig, step: int, *, for_execution: Literal[False], store: Literal[None] = ..., checkpointer: Literal[None] = ..., manager: Literal[None] = ...) -> dict[str, PregelTask]:
    ...

@overload
def prepare_next_tasks(checkpoint: Checkpoint, processes: Mapping[str, PregelNode], channels: Mapping[str, BaseChannel], managed: ManagedValueMapping, config: RunnableConfig, step: int, *, for_execution: Literal[True], store: Optional[BaseStore], checkpointer: Optional[BaseCheckpointSaver], manager: Union[None, ParentRunManager, AsyncParentRunManager]) -> dict[str, PregelExecutableTask]:
    ...

def prepare_next_tasks(checkpoint: Checkpoint, processes: Mapping[str, PregelNode], channels: Mapping[str, BaseChannel], managed: ManagedValueMapping, config: RunnableConfig, step: int, *, for_execution: bool, store: Optional[BaseStore] = ..., checkpointer: Optional[BaseCheckpointSaver] = ..., manager: Union[None, ParentRunManager, AsyncParentRunManager] = ...) -> Union[dict[str, PregelTask], dict[str, PregelExecutableTask]]:
    """Prepare the set of tasks that will make up the next Pregel step.
    This is the union of all PUSH tasks (Sends) and PULL tasks (nodes triggered
    by edges)."""
    ...

def prepare_single_task(task_path: tuple[str, Union[int, str]], task_id_checksum: Optional[str], *, checkpoint: Checkpoint, processes: Mapping[str, PregelNode], channels: Mapping[str, BaseChannel], managed: ManagedValueMapping, config: RunnableConfig, step: int, for_execution: bool, store: Optional[BaseStore] = ..., checkpointer: Optional[BaseCheckpointSaver] = ..., manager: Union[None, ParentRunManager, AsyncParentRunManager] = ...) -> Union[None, PregelTask, PregelExecutableTask]:
    """Prepares a single task for the next Pregel step, given a task path, which
    uniquely identifies a PUSH or PULL task within the graph."""
    ...
