"""
This type stub file was generated by pyright.
"""

import threading

WORD_OR_TAG = ...
BOUNDARY = ...
CORPUS_LOADED_EVENT = ...
SEARCH_TERMINATED_EVENT = ...
SEARCH_ERROR_EVENT = ...
ERROR_LOADING_CORPUS_EVENT = ...
POLL_INTERVAL = ...
_DEFAULT = ...
_CORPORA = ...
class ConcordanceSearchView:
    _BACKGROUND_COLOUR = ...
    _HIGHLIGHT_WORD_COLOUR = ...
    _HIGHLIGHT_WORD_TAG = ...
    _HIGHLIGHT_LABEL_COLOUR = ...
    _HIGHLIGHT_LABEL_TAG = ...
    _FRACTION_LEFT_TEXT = ...
    def __init__(self) -> None:
        ...

    def set_result_size(self, **kwargs): # -> None:
        ...

    def set_cntx_af_len(self, **kwargs): # -> None:
        ...

    def set_cntx_bf_len(self, **kwargs): # -> None:
        ...

    def search_enter_keypress_handler(self, *event): # -> None:
        ...

    def previous(self): # -> None:
        ...

    def __next__(self): # -> None:
        ...

    def about(self, *e): # -> None:
        ...

    def handle_error_loading_corpus(self, event): # -> None:
        ...

    def handle_corpus_loaded(self, event): # -> None:
        ...

    def handle_search_terminated(self, event): # -> None:
        ...

    def handle_search_error(self, event): # -> None:
        ...

    def corpus_selected(self, *args): # -> None:
        ...

    def load_corpus(self, selection): # -> None:
        ...

    def search(self): # -> None:
        ...

    def write_results(self, results): # -> None:
        ...

    def words_and_labels(self, sentence, pos1, pos2): # -> tuple[list, list]:
        ...

    def pad(self, sent, hstart, hend): # -> tuple:
        ...

    def destroy(self, *e): # -> None:
        ...

    def clear_all(self): # -> None:
        ...

    def clear_results_box(self): # -> None:
        ...

    def freeze_editable(self): # -> None:
        ...

    def unfreeze_editable(self): # -> None:
        ...

    def set_paging_button_states(self): # -> None:
        ...

    def fire_event(self, event): # -> None:
        ...

    def mainloop(self, *args, **kwargs): # -> None:
        ...



class ConcordanceSearchModel:
    def __init__(self, queue) -> None:
        ...

    def non_default_corpora(self): # -> list:
        ...

    def load_corpus(self, name): # -> None:
        ...

    def search(self, query, page): # -> None:
        ...

    def next(self, page): # -> None:
        ...

    def prev(self, page): # -> None:
        ...

    def reset_results(self): # -> None:
        ...

    def reset_query(self): # -> None:
        ...

    def set_results(self, page, resultset): # -> None:
        ...

    def get_results(self):
        ...

    def has_more_pages(self, page): # -> bool:
        ...

    class LoadCorpus(threading.Thread):
        def __init__(self, name, model) -> None:
            ...

        def run(self): # -> None:
            ...



    class SearchCorpus(threading.Thread):
        def __init__(self, model, page, count) -> None:
            ...

        def run(self): # -> None:
            ...

        def processed_query(self): # -> LiteralString:
            ...





def app(): # -> None:
    ...

if __name__ == "__main__":
    ...
__all__ = ["app"]
