"""
This type stub file was generated by pyright.
"""

from nltk.internals import deprecated

"""
CCG Lexicons
"""
PRIM_RE = ...
NEXTPRIM_RE = ...
APP_RE = ...
LEX_RE = ...
RHS_RE = ...
SEMANTICS_RE = ...
COMMENTS_RE = ...
class Token:
    """
    Class representing a token.

    token => category {semantics}
    e.g. eat => S\\var[pl]/var {\\x y.eat(x,y)}

    * `token` (string)
    * `categ` (string)
    * `semantics` (Expression)
    """
    def __init__(self, token, categ, semantics=...) -> None:
        ...

    def categ(self): # -> Any:
        ...

    def semantics(self): # -> None:
        ...

    def __str__(self) -> str:
        ...

    def __cmp__(self, other): # -> Literal[-1]:
        ...



class CCGLexicon:
    """
    Class representing a lexicon for CCG grammars.

    * `primitives`: The list of primitive categories for the lexicon
    * `families`: Families of categories
    * `entries`: A mapping of words to possible categories
    """
    def __init__(self, start, primitives, families, entries) -> None:
        ...

    def categories(self, word):
        """
        Returns all the possible categories for a word
        """
        ...

    def start(self): # -> PrimitiveCategory:
        """
        Return the target category for the parser
        """
        ...

    def __str__(self) -> str:
        """
        String representation of the lexicon. Used for debugging.
        """
        ...



def matchBrackets(string): # -> tuple[Any | LiteralString, Any | str]:
    """
    Separate the contents matching the first set of brackets from the rest of
    the input.
    """
    ...

def nextCategory(string): # -> tuple[Any | LiteralString, Any | str] | tuple[str | Any, ...]:
    """
    Separate the string for the next portion of the category from the rest
    of the string
    """
    ...

def parseApplication(app): # -> Direction:
    """
    Parse an application operator
    """
    ...

def parseSubscripts(subscr): # -> list:
    """
    Parse the subscripts for a primitive category
    """
    ...

def parsePrimitiveCategory(chunks, primitives, families, var): # -> tuple[CCGVar | Any, CCGVar | Any] | tuple | tuple[PrimitiveCategory, Any]:
    """
    Parse a primitive category

    If the primitive is the special category 'var', replace it with the
    correct `CCGVar`.
    """
    ...

def augParseCategory(line, primitives, families, var=...): # -> tuple[Any | CCGVar | PrimitiveCategory | FunctionalCategory, Any | CCGVar | None]:
    """
    Parse a string representing a category, and returns a tuple with
    (possibly) the CCG variable for the category
    """
    ...

def fromstring(lex_str, include_semantics=...): # -> CCGLexicon:
    """
    Convert string representation into a lexicon for CCGs.
    """
    ...

@deprecated("Use fromstring() instead.")
def parseLexicon(lex_str): # -> CCGLexicon:
    ...

openccg_tinytiny = ...
