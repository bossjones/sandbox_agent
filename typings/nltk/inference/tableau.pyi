"""
This type stub file was generated by pyright.
"""

from nltk.inference.api import BaseProverCommand, Prover

"""
Module for a tableau-based First Order theorem prover.
"""
_counter = ...
class ProverParseError(Exception):
    ...


class TableauProver(Prover):
    _assume_false = ...
    @staticmethod
    def is_atom(e): # -> bool:
        ...



class TableauProverCommand(BaseProverCommand):
    def __init__(self, goal=..., assumptions=..., prover=...) -> None:
        """
        :param goal: Input expression to prove
        :type goal: sem.Expression
        :param assumptions: Input expressions to use as assumptions in
            the proof.
        :type assumptions: list(sem.Expression)
        """
        ...



class Agenda:
    def __init__(self) -> None:
        ...

    def clone(self): # -> Agenda:
        ...

    def __getitem__(self, index):
        ...

    def put(self, expression, context=...): # -> None:
        ...

    def put_all(self, expressions): # -> None:
        ...

    def put_atoms(self, atoms): # -> None:
        ...

    def pop_first(self): # -> tuple[Any, int] | tuple[tuple[None, None], None]:
        """Pop the first expression that appears in the agenda"""
        ...

    def replace_all(self, old, new): # -> None:
        ...

    def mark_alls_fresh(self): # -> None:
        ...

    def mark_neqs_fresh(self): # -> None:
        ...



class Debug:
    def __init__(self, verbose, indent=..., lines=...) -> None:
        ...

    def __add__(self, increment): # -> Debug:
        ...

    def line(self, data, indent=...): # -> None:
        ...



class Categories:
    ATOM = ...
    PROP = ...
    N_ATOM = ...
    N_PROP = ...
    APP = ...
    N_APP = ...
    N_EQ = ...
    D_NEG = ...
    N_ALL = ...
    N_EXISTS = ...
    AND = ...
    N_OR = ...
    N_IMP = ...
    OR = ...
    IMP = ...
    N_AND = ...
    IFF = ...
    N_IFF = ...
    EQ = ...
    EXISTS = ...
    ALL = ...


def testTableauProver(): # -> None:
    ...

def testHigherOrderTableauProver(): # -> None:
    ...

def tableau_test(c, ps=..., verbose=...): # -> None:
    ...

def demo(): # -> None:
    ...

if __name__ == "__main__":
    ...
