"""
This type stub file was generated by pyright.
"""

from nltk.lm.api import Smoothing

"""Smoothing algorithms for language modeling.

According to Chen & Goodman 1995 these should work with both Backoff and
Interpolation.
"""
class WittenBell(Smoothing):
    """Witten-Bell smoothing."""
    def __init__(self, vocabulary, counter, **kwargs) -> None:
        ...

    def alpha_gamma(self, word, context): # -> tuple:
        ...

    def unigram_score(self, word):
        ...



class AbsoluteDiscounting(Smoothing):
    """Smoothing with absolute discount."""
    def __init__(self, vocabulary, counter, discount=..., **kwargs) -> None:
        ...

    def alpha_gamma(self, word, context): # -> tuple:
        ...

    def unigram_score(self, word):
        ...



class KneserNey(Smoothing):
    """Kneser-Ney Smoothing.

    This is an extension of smoothing with a discount.

    Resources:
    - https://pages.ucsd.edu/~rlevy/lign256/winter2008/kneser_ney_mini_example.pdf
    - https://www.youtube.com/watch?v=ody1ysUTD7o
    - https://medium.com/@dennyc/a-simple-numerical-example-for-kneser-ney-smoothing-nlp-4600addf38b8
    - https://www.cl.uni-heidelberg.de/courses/ss15/smt/scribe6.pdf
    - https://www-i6.informatik.rwth-aachen.de/publications/download/951/Kneser-ICASSP-1995.pdf
    """
    def __init__(self, vocabulary, counter, order, discount=..., **kwargs) -> None:
        ...

    def unigram_score(self, word): # -> float:
        ...

    def alpha_gamma(self, word, context): # -> tuple[Any | float, Any | float]:
        ...
